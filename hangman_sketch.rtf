{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf340
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww11880\viewh15480\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs30 \cf0 initializes with a  turn limit\
\
// word master chooses secret word\
\

\b hangman evaluates secret word\
hangman displays hint
\b0  (blank spaces = to secret word length)
\b \
word guesser gives letter
\b0  (which updates hint)\
--> (turn number gets incremented)\
--> (hint is compared to secret word)\
\
--> either turn limit is reached (lose)\
if hint == word (win)\
\
HumanPlayer class - guesser\
	human is given a length\
	human inputs a letter\
	human sees hint\
	game does its thing\
\
ComputerPlayer class - guesser\
	initialized with an alphabet\
	computer is given a length\
	\
	
\i AI
\i0 \
	- starts with a dictionary of words of the right length # this happens once.\
\
	# looped part\
	- only keep words that regex match to hint\
	- collects all letters existing in the reduced dictionary\
	- creates an array with each letter placed at the index equal to its frequency\
	- pops the last element in that array to use as guess\
	- passes the guess\
	}